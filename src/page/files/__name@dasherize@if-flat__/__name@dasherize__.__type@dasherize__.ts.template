import { Component, OnInit<% if(!!viewEncapsulation) { %>, ViewEncapsulation<% }%><% if(changeDetection !== 'Default') { %>, ChangeDetectionStrategy<% }%><% if(subscriptionManagement) { %>, OnDestroy<% }%> } from '@angular/core';<% if (subscriptionManagement) {%>
import { Subscription } from 'rxjs';<% }%>

import { SeoService } from '@core/services/seo/seo.service';

@Component({<% if(!skipSelector) {%>
	selector: '<%= selector %>',<%}%><% if(inlineTemplate) { %>
	template: `
		<p>
			<%= dasherize(name) %> works!
		</p>
	`,<% } else { %>
	templateUrl: './<%= dasherize(name) %><%= type ? '.' + dasherize(type): '' %>.html',<% } if(inlineStyle) { %>
	styles: [
	]<% } else if (style !== 'none') { %>
	styleUrls: ['./<%= dasherize(name) %><%= type ? '.' + dasherize(type): '' %>.<%= style %>']<% } %><% if(!!viewEncapsulation) { %>,
	encapsulation: ViewEncapsulation.<%= viewEncapsulation %><% } if (changeDetection !== 'Default') { %>,
	changeDetection: ChangeDetectionStrategy.<%= changeDetection %><% } %>
})
export class <%= classify(name) %><%= classify(type) %> implements OnInit<% if(subscriptionManagement) { %>, OnDestroy<% }%> {<% if (subscriptionManagement) {%>
	private readonly subscriptions: Subscription[] = [];
<% }%>
	constructor(
		private seo: SeoService
	) {
		this.seo.updateTitle('<%= capitalize(name) %>');
	}

	ngOnInit() {
	}<% if (subscriptionManagement) {%>

	ngOnDestroy() {
		this.subscriptions.forEach((subscription) => {
			subscription.unsubscribe();
		});
	}<% }%>
}
