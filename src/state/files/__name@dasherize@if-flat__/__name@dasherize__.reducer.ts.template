import { Action, createReducer, on } from '@ngrx/store';

import * as <%= classify(name) %>Actions from './<%= dasherize(name) %>.actions';
import { DataState, <%= camelize(name) %>Adaptor } from './<%= dasherize(name) %>.entity';<% if (ready) {%>

import { I<%= classify(name) %>Meta } from '@<%= dasherize(layer) %>/<%= dasherize(moduleName) %>/interfaces/<%= dasherize(name) %>-meta.interface';<% }%>

export interface <%= classify(name) %>State {
	data: DataState;<% if (ready) {%>
	meta: I<%= classify(name) %>Meta | undefined;<% }%>
	isUpdating: boolean;
	error: any;
}

const initialState: <%= classify(name) %>State = {
	data: <%= camelize(name) %>Adaptor.getInitialState(),<% if (ready) {%>
	meta: undefined,<% }%>
	isUpdating: false,
	error: null,
};

export const <%= camelize(name) %>ReducerFn = createReducer(
	initialState<% if (ready) {%>,
	// Fetch All
	on(<%= classify(name) %>Actions.load<%= classify(name) %>s, (state) => ({
		...state,
		isUpdating: true,
		error: null,
	})),
	on(<%= classify(name) %>Actions.load<%= classify(name) %>sSuccess, (state, { data, meta }) => ({
		...state,
		data: <%= camelize(name) %>Adaptor.setAll(data, state.data),
		meta: meta,
		isUpdating: false,
		error: null,
	})),
	on(<%= classify(name) %>Actions.load<%= classify(name) %>sFail, (state, { error }) => ({
		...state,
		isUpdating: false,
		error: error,
	})),

	// Fetch One
	on(<%= classify(name) %>Actions.load<%= classify(name) %>, (state) => ({
		...state,
		isUpdating: true,
		error: null,
	})),
	on(<%= classify(name) %>Actions.load<%= classify(name) %>Success, (state, { data }) => ({
		...state,
		data: <%= camelize(name) %>Adaptor.setOne(data, state.data),
		isUpdating: false,
		error: null,
	})),
	on(<%= classify(name) %>Actions.load<%= classify(name) %>Fail, (state, { error }) => ({
		...state,
		isUpdating: false,
		error: error,
	})),

	// Create
	on(<%= classify(name) %>Actions.create<%= classify(name) %>, (state) => ({
		...state,
		isUpdating: true,
		error: null,
	})),
	on(<%= classify(name) %>Actions.create<%= classify(name) %>Success, (state, { data }) => ({
		...state,
		data: <%= camelize(name) %>Adaptor.addOne(data, state.data),
		isUpdating: false,
		error: null,
	})),
	on(<%= classify(name) %>Actions.create<%= classify(name) %>Fail, (state, { error }) => ({
		...state,
		isUpdating: false,
		error: error,
	})),

	// Update
	on(<%= classify(name) %>Actions.update<%= classify(name) %>, (state) => ({
		...state,
		isUpdating: true,
		error: null,
	})),
	on(<%= classify(name) %>Actions.update<%= classify(name) %>Success, (state, { data }) => ({
		...state,
		data: <%= camelize(name) %>Adaptor.updateOne({ id: data.id, changes: data }, state.data),
		isUpdating: false,
		error: null,
	})),
	on(<%= classify(name) %>Actions.update<%= classify(name) %>Fail, (state, { error }) => ({
		...state,
		isUpdating: false,
		error: error,
	})),

	// Delete
	on(<%= classify(name) %>Actions.delete<%= classify(name) %>, (state) => ({
		...state,
		isUpdating: true,
		error: null,
	})),
	on(<%= classify(name) %>Actions.delete<%= classify(name) %>Success, (state, { id }) => ({
		...state,
		data: <%= camelize(name) %>Adaptor.removeOne(id, state.data),
		isUpdating: false,
		error: null,
	})),
	on(<%= classify(name) %>Actions.delete<%= classify(name) %>Fail, (state, { error }) => ({
		...state,
		isUpdating: false,
		error: error,
	}))
<% }%>);

export function <%= camelize(name) %>Reducer(state: <%= classify(name) %>State | undefined, action: Action) {
	return <%= camelize(name) %>ReducerFn(state, action);
}
