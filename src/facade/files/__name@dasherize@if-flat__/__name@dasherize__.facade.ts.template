import { Injectable } from '@angular/core';<% if (ready) {%>
import { Action, Store } from '@ngrx/store';

import * as <%= camelize(name) %>Selectors from '@<%= dasherize(layer) %>/<%= dasherize(moduleName) %>/entities/<%= dasherize(name) %>/<%= dasherize(name) %>.selectors';
import * as <%= camelize(name) %>Action from '@<%= dasherize(layer) %>/<%= dasherize(moduleName) %>/entities/<%= dasherize(name) %>/<%= dasherize(name) %>.actions';
import { <%= classify(name) %>State } from '@<%= dasherize(layer) %>/<%= dasherize(moduleName) %>/entities/<%= dasherize(name) %>/<%= dasherize(name) %>.reducer';

import { I<%= classify(name) %>, I<%= classify(name) %>Dto } from '@<%= dasherize(layer) %>/<%= dasherize(moduleName) %>/models/<%= dasherize(name) %>.model';
import { I<%= classify(name) %>Params } from '@<%= dasherize(layer) %>/<%= dasherize(moduleName) %>/interfaces/<%= dasherize(name) %>/params.interface';<% }%>

@Injectable()
export class <%= classify(name) %>Facade {<% if (ready) {%>
	isUpdating$ = this.store.select(<%= camelize(name) %>Selectors.selectIsLoading);
	error$ = this.store.select(<%= camelize(name) %>Selectors.selectError);

	getAll$ = this.store.select(<%= camelize(name) %>Selectors.getAll);
	get$ = (id: string) => this.store.select(<%= camelize(name) %>Selectors.get(id));

	meta$ = this.store.select(<%= camelize(name) %>Selectors.selectMeta);
	<% }%>
	constructor(<% if (ready) {%>
		private store: Store<<%= classify(name) %>State>
	<% }%>) {}<% if (ready) {%>

	dispatch(action: Action) {
		this.store.dispatch(action);
	}

	fetch(params: I<%= classify(name) %>Params = null) {
		this.store.dispatch(<%= camelize(name) %>Action.load<%= classify(name) %>s({ params }));
	}

	fetchSingle(id: string) {
		this.store.dispatch(<%= camelize(name) %>Action.load<%= classify(name) %>({ id }));
	}

	create(<%= camelize(name) %>: I<%= classify(name) %>Dto) {
		this.store.dispatch(<%= camelize(name) %>Action.create<%= classify(name) %>({ <%= camelize(name) %> }));
	}

	update(<%= camelize(name) %>: I<%= classify(name) %>Dto) {
		this.store.dispatch(<%= camelize(name) %>Action.update<%= classify(name) %>({ <%= camelize(name) %> }));
	}

	delete(<%= camelize(name) %>: I<%= classify(name) %>) {
		this.store.dispatch(<%= camelize(name) %>Action.delete<%= classify(name) %>({ <%= camelize(name) %> }));
	}<% }%>
}
